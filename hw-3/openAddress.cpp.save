#include <iostream>
#include "LinkedList.cpp" // Your Own Implementation
#include <cstring>
#include <fstream>
#include "openAddress.h"

using namespace std;


int OpenAddress::hash(string str){ // Given a String, return its hash
        int size = str.length();
        int hashsum = 0;
        for (int i=0; i<size; i++) {
                int index = (size-1)-i;
                hashsum = hashsum + (str[i]*(a^index));
        }
	int a = hashsum % tableSize;
        return a;
}

int OpenAddress::hashcode(string str) {
	int size = str.length();
        int hashsum = 0;
        for (int i=0; i<size; i++) {
                int index = (size-1)-i;
                hashsum = hashsum + (str[i]*(a^index));
        }
	return hashsum;
}

OpenAddress::OpenAddress(int A) {
	val = 0;
	a = A;
	tableSize = 11;
	collisions = 0;
	hashTable = new string[tableSize];
}

long OpenAddress::getSize() {
	return tableSize;
}
  
void OpenAddress::resize() {
	tableSize = tableSize*2;
	string* arr = new string[tableSize];
	for (int i=0; i<val; i++) {
		arr[i] = hashTable[i];
	}
	hashTable = arr;	
}

void OpenAddress::insertItem(string word) {   // Takes a hash of 'Word' and inserts it into hashTable accordingly
	if (val == tableSize) {
		resize();
	}
	int hash1 = hash(word);
	if (hashTable[hash1] == "") {
		hashTable[hash1] = word;
		val++;
	} else {
       	//	int hash_new = hashcode(word);
	//	for (int i=hash_new; i<1+tableSize+hash_new; i++) {
	//		int j = i % a;
	//		if (hashTable[j] == "") {
     	 //		        hashTable[j] = word;
	//			collisions++;
        //	        	val++;
	//			break;
       	//		}
	//	}
		for (int i=hash1; i<hash1+tableSize; i++) {
			int j = i%tableSize;
			if (hashTable[j] == "") {
                              hashTable[j] = word;
                              collisions++;
                              val++;
                              break;
                       }
		}
	}
}

string OpenAddress::lookUp(string word) {             // Looks for 'Word' and if found, returns it
	//int hash_new = hashcode(word);
	//for (int i=hash_new; i<tableSize+hash_new ; i++) {
	//	i = i%a;
	//	if (hashTable[i] == word) {
	//		return word;
	//	}
	//}
	//return "";
	int hash1 = hash(word);
	if (hashTable[hash1] == word) {
		return word;
	} else {
		for (int i=hash1; i<hash1+tableSize; i++) {
			int j=i % tableSize;
			if (hashTable[j] == word) {
		                return word;
			}
		}
	}
	return "";
}

int OpenAddress::Collisions() { // Return number of collisions in hashTable.
	return collisions;
}
